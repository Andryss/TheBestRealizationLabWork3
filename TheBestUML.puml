@startuml
'Текст задания:
'
'Издательская компания «Эксмо» совместно с Hoff представила данные по
'книжным предпочтениям россиян в 2021 году: абсолютным лидером продаж
'стали книги (издание и переиздание) Михаила Лабковского «Хочу и буду»,
'сообщили в пресс-службе.
'
'Книги психолога лидировали по продажам по всей стране: за год было
'продано более 129 тыс. экземпляров первого издания и 34,5 тыс. второго.
'
'На втором месте по популярности у покупателей детектив «Внутри убийцы»
'израильского писателя Майка Омера (более 92 тыс. экземпляров) про
'криминального психолога-женщину, расследующую череду жестоких
'преступлений. Тройку лидеров продаж замыкает роман «Transhumanism inc.»
'Виктора Пелевина — новинка российского автора разошлась в количестве 71
'тыс. экземпляров.

enum Genre {
ADVENTURE("приключенческая книга")
VISUAL_NOVEL("визуальная новелла")
DETECTIVE("детектив")
DRAMA("драма")
FANTASY("фантастика")
HISTORICLAL("историческая книга")
PSYCHOLOGIC("Психологическая")
--Fields--
- final String name
--Constructors--
Genre(String name)
--Methods--
'dont understand "collision problem"
'I think all is OK
+ static getRandomGenre() : Genre
+ getName() : String
}

'i think it is bad idea to use ENUM here
'Country should be class
'but countryName should be enum (maybe inner enum?)
'so we will create OUR country by using "add" method
class Country{
--Fields--
- CountryName name
- int population
- Person[] people
--Constructors--
'this changes makes 1 Exception useless
Country(CountryName name, int population)
'in this constructor we create Person[population]
--Methods--
'i think Publisher class should makePeopleChoice
+ (getters)
+ add(Person person) : void
}

enum CountryName {
'just an idea
}

interface Readable {
--Methods--
read() : String
}

class Book implements Readable {
--Fields--
'delete year field
- String author
- String title
- Genre genre
- int edition
- String about
--Constructors--
Book()
--Methods--
'there is the method, which mix all info
'about book in one String and return it
+ read(): String
'it is read, because Readable
}


abstract class Person {
--Fields--
- String name
--Methods--
+ getName() : String
+ abstract whatYouBuy(Readable[] readable): Readable[]
+ abstract choseBest(Readable[] readable): Readable
+ abstract choseWorst(Readable[] readable): Readable
}

class Publisher {
--Fields--
- String name
--Methods--
'i think it should be void but print all info in stdout
'this method should ask all people in the World about Readable[]
+ publish(World, Readable[]): void
- (some private help-methods)
}

class World {
--Fields--
- int year = 0
- Country[] countries
--Constructors--
World(Country[] countries)
--Methods--
'i think publisher must ask persons
'+ makeCountryChoose(Country country): void
'+ getResults(): Book[]
+ (just getters)
}

class TooManyPeopleException extends RuntimeException {
}

'useless exception
'class CountryDoesNotExistException extends Exception {
'}
@enduml
