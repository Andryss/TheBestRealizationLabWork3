@startuml
'Текст задания:
'
'Издательская компания «Эксмо» совместно с Hoff представила данные по
'книжным предпочтениям россиян в 2021 году: абсолютным лидером продаж
'стали книги (издание и переиздание) Михаила Лабковского «Хочу и буду»,
'сообщили в пресс-службе.
'
'Книги психолога лидировали по продажам по всей стране: за год было
'продано более 129 тыс. экземпляров первого издания и 34,5 тыс. второго.
'
'На втором месте по популярности у покупателей детектив «Внутри убийцы»
'израильского писателя Майка Омера (более 92 тыс. экземпляров) про
'криминального психолога-женщину, расследующую череду жестоких
'преступлений. Тройку лидеров продаж замыкает роман «Transhumanism inc.»
'Виктора Пелевина — новинка российского автора разошлась в количестве 71
'тыс. экземпляров.

enum Genre {
ADVENTURE("приключенческая книга")
VISUAL_NOVEL("визуальная новелла")
DETECTIVE("детектив")
DRAMA("драма")
FANTASY("фантастика")
HISTORICLAL("историческая книга")
PSYCHOLOGIC("Психологическая")
--Fields--
- final String name
--Constructors--
Genre(String name)
--Methods--
'do not forget about collisions:
'do not return same object twice
'it may cause some problems since objects would have the same link
+ static getRandomGenre() : Genre
+ getName() : String
}

enum Country{
'some countries
USSR("USSR")
--Fields--
- String name
- int population
- Person[] people
--Constructors--
Country(String name, int population, Person[] People)
--Methods--
+makePeopleChoose: void
}

interface Readable {
--Methods--
read() : String
}

class Book implements Readable {
--Fields--
'too many fields, maybe we should reduce it's number
- String author
- String title
- Genre genre
- int year
- int edition
- String about
--Methods--
'maybe we can store info about book just as String
'and return it
+getInformation(): String
}


abstract class Person {
--Fields--
- String name
--Methods--
+ getName() : String
+ abstract whatYouBuy(List<Readable>): List<Readable>
+ abstract choseBest(List<Readable>): Readable
+ abstract choseWorst(List<Readable>): Readable
}

'dont think it should be abstract
class Publisher {
--Fields--
- String name
--Methods--
+ publish: String
}

class World {
--Fields--
- int year = 0
- Country[] countries
--Constructors--
World(Country[] countries)
--Methods--
'this method takes country and invokes methods
'whatyoubuy and choosebest/worst for all people in it
+ makeCountryChoose(Country country): void
+ getResults(): Book[]
}

class TooManyPeopleException extends RuntimeException {
}

class CountryDoesNotExistException extends Exception {
}
@enduml
