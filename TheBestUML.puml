@startuml
'Текст задания:
'
'Издательская компания «Эксмо» совместно с Hoff представила данные по
'книжным предпочтениям россиян в 2021 году: абсолютным лидером продаж
'стали книги (издание и переиздание) Михаила Лабковского «Хочу и буду»,
'сообщили в пресс-службе.
'
'Книги психолога лидировали по продажам по всей стране: за год было
'продано более 129 тыс. экземпляров первого издания и 34,5 тыс. второго.
'
'На втором месте по популярности у покупателей детектив «Внутри убийцы»
'израильского писателя Майка Омера (более 92 тыс. экземпляров) про
'криминального психолога-женщину, расследующую череду жестоких
'преступлений. Тройку лидеров продаж замыкает роман «Transhumanism inc.»
'Виктора Пелевина — новинка российского автора разошлась в количестве 71
'тыс. экземпляров.

enum Genre {
ADVENTURE("приключенческая книга")
VISUAL_NOVEL("визуальная новелла")
DETECTIVE("детектив")
DRAMA("драма")
FANTASY("фэнтези"),
SCIENCE_FICTION("научная фантастика"),
HISTORICAL("историческая книга"),
PSYCHOLOGIC("психологическая книга");
--Fields--
- final String name
--Constructors--
Genre(String name)
--Methods--
+ static getRandomGenre() : Genre
+ static getRandomGenres() : Genre[]
+ getName() : String
}


enum Country{
USSR("СССР", 100),
FRANCE("Франция", 100),
GERMANY("Германия", 100),
NORWAY("Норвегия", 100);
--Fields--
- String name
- int population
- boolean anarchyFlag
'persons-heap :)
- Person[] people
--Constructors--
Country(String name, int population)
--Methods--
- immigration() : void
+ getName(): String
+ getPopulation(): int
+ isAnarchy(): boolean
+ getPeople() : Person[]
}

interface Readable {
--Methods--
'this method will return info about readable
'so TheBestLab4.Book.read() should return String with author, title, genre, about fields
read() : String
}

'REMIND TO MAKE IT CLASS
enum Book implements Readable {
HARRYPOTTER(),
THESTAINLESSRAT();
--Fields--
- String author
- String title
- Genre genre
- int edition
- String about
--Constructors--
Book(String author, String title, Genre genre, int edition, String about)
--Methods--
+ read(): String
+ getGenre(): Genre
+ getEdition(): int
+ getAbout(): String
+ getAuthor(): String
+ getTitle(): String
}

class Person {
--Fields--
- final static String[] names;
- String name
- Genre[] favouriteGenres
--Methods--
+ static getRandomName(): String
+ static getRandomPerson() : Person
+ getName() : String
+ getFavouriteGenres(): Genre[]
+ whatYouBuy(Readable[] readable): Readable[]
+ choseBest(Readable[] readable): Readable
+ choseWorst(Readable[] readable): Readable
}

abstract class Publisher {
--Fields--
- String name
--Constructors--
Publisher(String name)
--Methods--
+ abstract publish(World world, Readable[] readables): void
+ getName(): String
}


class TheBestPublisher extends Publisher {
--Fields--
- Map<Readable, Integer> rating
--Constructors--
TheBestPublisher(String name)
--Methods--
+ publish(World world, Readable[] readables): void
- survey(World world, Readable[], readables): void
}

class Publisher2 extends Publisher {
'publisher which invokes choseBest method
}

class Publisher3 extends Publisher {
'publisher which invokes choseWorst method
}

class World {
--Fields--
- int year = 0
- Country[] countries
--Constructors--
World(Country[] countries)
--Methods--
}

class TooManyPeopleException extends Exception {
'we want to have more Persons than TheBestLab4.Person[] can contain
--Fields--
- Country country
' The idea is that we can continue with our program, but
' if we have more People than possible the anarchy starts in country
' and we can't ask people in it about books
' funny)))
- Person person
--Methods--
+ getMessage() : String
}

'useless exception
class PeopleWereNotCreateException extends RuntimeException {
'we want to add TheBestLab4.Person and TheBestLab4.Person[] is null (not created)
--Fields--
- Country country
--Methods--
+ getMessage() : String
}

@enduml
